# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"  # Porta para conex√£o AMQP
      - "15672:15672"  # Porta para o painel de controle da RabbitMQ
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 2s
      timeout: 2s
      retries: 20
    volumes:
      - .:/src # Volume para armazenar dados da RabbitMQ

  # broker:
  #   image: eclipse-mosquitto:latest
  #   ports:
  #     - 1883:1883
  #   volumes:
  #     - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf

  simulation:
    build:
      context: .
      dockerfile: Dockerfile.simulation
    depends_on:
      rabbitmq:
          condition: service_healthy
      
    volumes:
      - .:/src
  api-test:
    build:
      context: .
      dockerfile: Dockerfile.api-test
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/src

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin1234
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "5432:5432"
    volumes:
      - ./migrations.sql:/docker-entrypoint-initdb.d/migrations.sql
      - postgres:/var/lib/postgresql/data

volumes: 
  postgres: